/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { OperationService } from "../operation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { OperationCreateInput } from "./OperationCreateInput";
import { Operation } from "./Operation";
import { OperationFindManyArgs } from "./OperationFindManyArgs";
import { OperationWhereUniqueInput } from "./OperationWhereUniqueInput";
import { OperationUpdateInput } from "./OperationUpdateInput";
import { HistoryFindManyArgs } from "../../history/base/HistoryFindManyArgs";
import { History } from "../../history/base/History";
import { HistoryWhereUniqueInput } from "../../history/base/HistoryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class OperationControllerBase {
  constructor(
    protected readonly service: OperationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Operation })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createOperation(
    @common.Body() data: OperationCreateInput
  ): Promise<Operation> {
    return await this.service.createOperation({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        operand1: true,
        result: true,
        operand2: true,
        typeField: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Operation] })
  @ApiNestedQuery(OperationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async operations(@common.Req() request: Request): Promise<Operation[]> {
    const args = plainToClass(OperationFindManyArgs, request.query);
    return this.service.operations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        operand1: true,
        result: true,
        operand2: true,
        typeField: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Operation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async operation(
    @common.Param() params: OperationWhereUniqueInput
  ): Promise<Operation | null> {
    const result = await this.service.operation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        operand1: true,
        result: true,
        operand2: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Operation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateOperation(
    @common.Param() params: OperationWhereUniqueInput,
    @common.Body() data: OperationUpdateInput
  ): Promise<Operation | null> {
    try {
      return await this.service.updateOperation({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          operand1: true,
          result: true,
          operand2: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Operation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteOperation(
    @common.Param() params: OperationWhereUniqueInput
  ): Promise<Operation | null> {
    try {
      return await this.service.deleteOperation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          operand1: true,
          result: true,
          operand2: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/histories")
  @ApiNestedQuery(HistoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "History",
    action: "read",
    possession: "any",
  })
  async findHistories(
    @common.Req() request: Request,
    @common.Param() params: OperationWhereUniqueInput
  ): Promise<History[]> {
    const query = plainToClass(HistoryFindManyArgs, request.query);
    const results = await this.service.findHistories(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        operationDate: true,

        operation: {
          select: {
            id: true,
          },
        },

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/histories")
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "update",
    possession: "any",
  })
  async connectHistories(
    @common.Param() params: OperationWhereUniqueInput,
    @common.Body() body: HistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      histories: {
        connect: body,
      },
    };
    await this.service.updateOperation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/histories")
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "update",
    possession: "any",
  })
  async updateHistories(
    @common.Param() params: OperationWhereUniqueInput,
    @common.Body() body: HistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      histories: {
        set: body,
      },
    };
    await this.service.updateOperation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/histories")
  @nestAccessControl.UseRoles({
    resource: "Operation",
    action: "update",
    possession: "any",
  })
  async disconnectHistories(
    @common.Param() params: OperationWhereUniqueInput,
    @common.Body() body: HistoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      histories: {
        disconnect: body,
      },
    };
    await this.service.updateOperation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
